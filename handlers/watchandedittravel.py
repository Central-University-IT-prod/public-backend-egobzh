import os
from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram import Bot, types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.types.input_file import FSInputFile
from database import Database
from datetime import datetime
from parsing import Parsing


router = Router()
bot = Bot(token="secret")

#travel_{travel[0]}
@router.callback_query(F.data[:6] == 'travel')
async def watchtravel(callback:  types.CallbackQuery, state: FSMContext):
    uid = callback.data.split('_')[1]
    travel = await Database().get_travel(uid)
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text='–ó–∞–º–µ—Ç–∫–∏üìú', callback_data=f'data_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–û–ø—Ü–∏–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—èüìë', callback_data=f'options_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å –∑–∞–º–µ—Ç–∫—É‚ûï', callback_data=f'addz_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–≤–∞—Ç–Ω—É—é –∑–∞–º–µ—Ç–∫—Éüîí', callback_data=f'addpz_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å —É—á–∞—Å—Ç–Ω–∏–∫–∞‚ûï', callback_data=f'addfr_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–î–æ–±–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—éüìç', callback_data=f'addlock_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–ò–∑–º–µ–Ω–∏—Ç—å –æ–ø–∏—Å–∞–Ω–∏–µ‚úèÔ∏è', callback_data=f'editbio_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–£–¥–∞–ª–∏—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µüóëÔ∏è', callback_data=f'delete_{uid}')
    )
    text = (f'–î–∞–Ω–Ω—ã–µ –æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏üóÉÔ∏è:\n'
            f'idüé´: {travel["about"][0]}\n'
            f'–ù–∞–∑–≤–∞–Ω–∏–µ‚úç: {travel["about"][1]}\n'
            f'–û –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–∏üìï: {travel["about"][2]}\n'
            f'–õ–æ–∫–∞—Ü–∏–∏ –ø–æ—Å–µ—â–µ–Ω–∏—èüó∫Ô∏è:\n')
    locs = ''
    locations = sorted(travel['locations'],key = lambda x: datetime.strptime(x[-1], "%Y-%m-%d"))
    for i in locations:
        txt = f'üìç{i[1]}|{i[2]} - {i[3]}\n'
        locs += txt
    text += locs
    users = ''
    for i in travel['members']:
        users += f'@{i[0]}\n'
    text += '–£—á–∞—Å—Ç–Ω–∏–∫–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—èüë®‚Äçüë®‚Äçüë¶‚Äçüë¶:\n'
    text += users
    await callback.message.answer(text, reply_markup=builder.as_markup())

@router.callback_query(F.data[:4] == 'data')
async def checknotes(callback:  types.CallbackQuery, state: FSMContext):
    uid = callback.data.split('_')[1]
    notes = await Database().getnotes(uid, callback.from_user.username)
    if len(notes) == 0:
        await callback.message.answer('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–º–µ—Ç–æ–∫ –ø–æ –¥–∞–Ω–Ω–æ–º—É –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—é:(')
        return
    for ind, note in enumerate(notes):
        document = FSInputFile(os.getcwd() + '/writes' + note[3])
        await bot.send_document(callback.from_user.id, document, caption=f'–ó–∞–º–µ—Ç–∫–∞ #{ind+1}\n–¢–µ–∫—Å—Ç: ' + note[2])

@router.callback_query(F.data[:7] == 'options')
async def traveloptions(callback:  types.CallbackQuery, state: FSMContext):
    uid = callback.data.split('_')[1]
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text='–ö–∞—Ä—Ç–∞ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—èüó∫Ô∏è', callback_data=f'map_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–ü–æ–≥–æ–¥–∞üå¶Ô∏è', callback_data=f'weather_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–ë–æ–ª—å–Ω–∏—Ü—ãüöë', callback_data=f'hosp_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–û—Ç–µ–ª–∏üõèÔ∏è', callback_data=f'hotels_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–†–µ—Å—Ç–æ—Ä–∞–Ω—ãüåÆüçïü•™', callback_data=f'rests_{uid}')
    )
    builder.row(types.InlineKeyboardButton(
        text='–ò–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞üóΩ', callback_data=f'attr_{uid}')
    )
    await callback.message.answer('–í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –æ–ø—Ü–∏—é:', reply_markup=builder.as_markup())

@router.callback_query(F.data[:7] == 'weather')
async def getweather(callback:  types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.....')
    uid = callback.data.split('_')[1]
    travel = await Database().get_travel(uid)
    await callback.message.answer(await Parsing().getweather([i for i in sorted(travel['locations'], key=lambda x: datetime.strptime(x[-1], "%Y-%m-%d"))]))

@router.callback_query(F.data[:6] == 'hotels')
async def gethotels(callback:  types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.....')
    uid = callback.data.split('_')[1]
    travel = await Database().get_travel(uid)
    travels = []
    for loc in sorted(travel['locations'], key=lambda x: datetime.strptime(x[-1], "%Y-%m-%d")):
        travels.append(await Parsing().gethotels(loc[1].split(',')[1], loc[2], loc[3]))
    await callback.message.answer('----------------------------------------------------\n'.join(travels))

@router.callback_query(F.data[:3] == 'map')
async def getmap(callback:  types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–°–æ–∑–¥–∞—é –∫–∞—Ä—Ç—É....')
    uid = callback.data.split('_')[1]
    travel = await Database().get_travel(uid)
    file = await Parsing().getmap([i[1] for i in sorted(travel['locations'], key=lambda x: datetime.strptime(x[-1], "%Y-%m-%d"))])
    document = FSInputFile(os.getcwd() + '/' + file)
    await bot.send_photo(callback.from_user.id, document)

@router.callback_query(F.data[:5] == 'rests')
async def getfood(callback:  types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.....')
    uid = callback.data.split('_')[1]
    travel = await Database().get_travel(uid)
    await callback.message.answer(await Parsing().getrestoraunce([i[1] for i in sorted(travel['locations'], key=lambda x: datetime.strptime(x[-1], "%Y-%m-%d"))]))

@router.callback_query(F.data[:4] == 'hosp')
async def gethosp(callback:  types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.....')
    uid = callback.data.split('_')[1]
    travel = await Database().get_travel(uid)
    await callback.message.answer(await Parsing().gethospitals([i[1] for i in sorted(travel['locations'], key=lambda x: datetime.strptime(x[-1], "%Y-%m-%d"))]))

@router.callback_query(F.data[:4] == 'attr')
async def getattrs(callback:  types.CallbackQuery, state: FSMContext):
    await callback.message.answer('–°–æ–±–∏—Ä–∞—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.....')
    uid = callback.data.split('_')[1]
    travel = await Database().get_travel(uid)
    await callback.message.answer(await Parsing().getinterestig([i[1] for i in sorted(travel['locations'], key=lambda x: datetime.strptime(x[-1], "%Y-%m-%d"))]))