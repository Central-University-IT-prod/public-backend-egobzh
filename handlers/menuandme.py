from aiogram import Router, F
from aiogram.fsm.context import FSMContext
from aiogram import types
from aiogram.utils.keyboard import InlineKeyboardBuilder
from aiogram.filters.command import Command
from database import Database


router = Router()

@router.message(Command("menu"))
async def menu(message: types.Message, state: FSMContext):
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="–ú–æ–∏ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è‚úàÔ∏è", callback_data='mytravel')
    )
    builder.row(types.InlineKeyboardButton(
        text="–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—åüÜî",
        callback_data='me')
    )
    builder.row(types.InlineKeyboardButton(
        text="–°–æ–∑–¥–∞—Ç—å –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–µüÜï",
        callback_data='addtravel')
    )
    builder.row(types.InlineKeyboardButton(
        text="–°–∞–º—ã–µ –ø–æ—Å–µ—â–∞–µ–º—ã–µ –ª–æ–∫–∞—Ü–∏–∏üèÜ",
        callback_data='bestlock')
    )
    builder.row(types.InlineKeyboardButton(
        text="–†–µ–π—Ç–∏–Ω–≥ –æ–ø—ã—Ç–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤üß≥",
        callback_data='besttraveler')
    )
    await message.answer("–¢–µ–±—è –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –±–æ—Ç –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏–π! –°–µ–π—á–∞—Å —Ç—ã –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é. –í—ã–±–µ—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º—É—é –≤–∫–ª–∞–¥–∫—É.", reply_markup=builder.as_markup())

@router.callback_query(F.data == 'me')
async def myprofile(callback:  types.CallbackQuery):
    profile = await Database().getuser(callback.from_user.username)
    builder = InlineKeyboardBuilder()
    builder.row(types.InlineKeyboardButton(
        text="–ó–∞–ø–æ–ª–Ω–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å —Å–Ω–æ–≤–∞‚úèÔ∏è", callback_data='editprofile')
    )
    await callback.message.answer(f'–¢–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—åüÜî:\n–ò–º—èüôã: {profile[0]}\n'
                                  f'–í–æ–∑—Ä–∞—Å—ÇüìÜ: {profile[1]}\n'
                                  f'–ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µüìç: {profile[3]}, {profile[2]}\n'
                                  f'–û–±–æ –º–Ω–µüìú: {profile[4]}\n',reply_markup=builder.as_markup())

@router.callback_query(F.data == 'bestlock')
async def bestlock(callback:  types.CallbackQuery):
    top = await Database().ratelocks()
    text = '–¢–æ–ø 5 —Å–∞–º—ã—Ö –ø–æ—Å–µ—â–∞–µ–º—ã—Ö –ª–æ–∫–∞—Ü–∏–π:\n'
    for ind, i in enumerate(top[:5]):
        text += f'üéñÔ∏è#{ind+1} {i[0]}\n'
    await callback.message.answer(text)

@router.callback_query(F.data == 'besttraveler')
async def besttrav(callback:  types.CallbackQuery):
    top = await Database().ratetravelers()
    text = '–¢–æ–ø 5 —Å–∞–º—ã—Ö –æ–ø—ã—Ç–Ω—ã—Ö –ø—É—Ç–µ—à–µ—Å—Ç–≤–µ–Ω–Ω–∏–∫–æ–≤:\n'
    for ind, i in enumerate(top[:5]):
        text += f'üéñÔ∏è#{ind+1} @{i[0]} –ü—É—Ç–µ—à–µ—Å—Ç–≤–∏–π: {i[1]}\n'
    await callback.message.answer(text)